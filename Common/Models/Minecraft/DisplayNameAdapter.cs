using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Highgeek.McWebApp.Common.Models.Minecraft;
//
//    var displayNameAdapter = DisplayNameAdapter.FromJson(jsonString);

namespace Highgeek.McWebApp.Common.Models.Minecraft.DisplayName
{

    public partial class DisplayNameAdapter
    {
        [JsonProperty("extra")]
        public List<Extra> Extra { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        public string? HtmlText { get; set; }
    }

    public partial class Extra
    {
        [JsonProperty("bold")]
        public bool Bold { get; set; }

        [JsonProperty("color")]
        public string Color { get; set; }

        [JsonProperty("italic")]
        public bool Italic { get; set; }

        [JsonProperty("obfuscated")]
        public bool Obfuscated { get; set; }

        [JsonProperty("strikethrough")]
        public bool Strikethrough { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("underlined")]
        public bool Underlined { get; set; }
    }

    public partial class DisplayNameAdapter
    {
        public static DisplayNameAdapter FromJson(string json)
        {
            DisplayNameAdapter displayNameAdapter = JsonConvert.DeserializeObject<DisplayNameAdapter>(json, Highgeek.McWebApp.Common.Models.Minecraft.DisplayName.Converter.Settings);

            if (displayNameAdapter.Extra is not null)
            {
                string htmlString = "";
                foreach (var extra in displayNameAdapter.Extra)
                {
                    string character = extra.Text;

                    if (extra.Underlined)
                    {
                        character = string.Format("<u>{0}</u>", character);
                    }
                    if (extra.Italic)
                    {
                        character = string.Format("<i>{0}</i>", character);
                    }
                    if (extra.Obfuscated)
                    {

                    }
                    if (extra.Bold)
                    {
                        character = string.Format("<b>{0}</b>", character);
                    }
                    if (extra.Strikethrough)
                    {
                        character = string.Format("<del>{0}</del>", character);
                    }
                    
                    htmlString += "<span style=\"color:" + extra.Color + ";\">" + character + "</span>";

                }
                displayNameAdapter.HtmlText = htmlString;
            }
            else
            {
                displayNameAdapter.HtmlText = displayNameAdapter.Text;
            }

            return displayNameAdapter;
        }
    }

    public static class Serialize
    {
        public static string ToJson(this DisplayNameAdapter self) => JsonConvert.SerializeObject(self, Highgeek.McWebApp.Common.Models.Minecraft.DisplayName.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}


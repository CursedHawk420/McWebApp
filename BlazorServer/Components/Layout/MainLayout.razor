@using Microsoft.AspNetCore.Identity
@inherits LayoutComponentBase
@inject UserManager<ApplicationUser> _userManager
@inject IRefreshService _refreshService
@inject IUserService _userService
@inject ILogger<MainLayout> _logger

@inject IRedisUpdateService _redisUpdateService
@inject IRedisItemsService _invService
@inject IAuctionService _auctionService
@inject ISnackbar _snack

@implements IDisposable

<MudThemeProvider Theme="_themeManager.Theme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<!--<MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))"  />
<MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme"  />-->
@if (_userService.Loaded)
{
    <GlobalUsersCounter/>
    <CascadingValue Value="this">
        <MudDropContainer T="IRedisLivingObject" Items="_invService.AllItems" CanDropClass="mud-border-info" NoDropClass="mud-border-error" CanDrop="@( (item,identifier ) => _invService.AllItems.Count(x => x.Uuid == identifier ) == 0)" ItemsSelector="@((item,dropzone) => item.Uuid == dropzone)" ItemPicked="_invService.ItemPicked" ItemDropped="_invService.ItemDroped"
        Class="" @ref="MainDropContainer">
            <ChildContent>
                <MudLayout>
                    <MudAppBar>
                        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                        <a href="/" class="link-hover">
                            <MudText>HighGeek</MudText>
                        </a>
                        <MudSpacer />
                        @if (_userService.Loaded)
                        {
                            <LanguageSwitch />
                        }
                        @if (_userService.HasConnectedAccount)
                        {
                            <EconomyComponent />
                            <a href="/Minecraft/Account/Statistics">
                                <MudAvatar>
                                    <MudImage Src="@("https://api.highgeek.eu/api/skins/playerhead/"+_userService.ApplicationUser.mcNickname)">

                                    </MudImage>
                                </MudAvatar>
                            </a>
                        }
                    </MudAppBar>
                    @if (_userService.Loaded)
                    {
                        <MudDrawer @bind-Open="@_drawerOpen" Color="Color.Dark">
                            <NavMenu />
                        </MudDrawer>
                        <MudMainContent>
                            <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                                @Body
                                <Highgeek.McWebApp.BlazorServer.Components.GameChat.ChatButton />
                                <Highgeek.McWebApp.BlazorServer.Components.Inventory.InventoryButton />
                                <MudDropZone T="IRedisLivingObject" Identifier="@(_invService.WinvIdentifier + "2")" DraggingClass="mud-theme-success" Class="mud-drop-zone-with-menu  d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default" Style="height:41px;width:41.4px;" />

                            </MudContainer>
                        </MudMainContent>
                    }
                    else
                    {
                        <PageTitle>HighGeek - Loading</PageTitle>
                        <h1>Loading...</h1>
                    }
                </MudLayout>
            </ChildContent>
            <ItemRenderer>
                @if (context.Payload != GameItem.AIRITEM)
                {
                    @switch(context){
                        case AuctionItem auctionItem:
                            <MudMenu Tag="auctionItem" @ondblclick="@( (x) => DoubleClickOnMenuEvent(x, auctionItem))" @ref="MudMenu" ActivationEvent="@MouseEvent.RightClick" Style="height:33px;width:33px;">
                                <ActivatorContent>
                                    <MudDynamicDropItem T="AuctionItem" Class=" justify-center align-center flex-grow-1" Style="height:33px;width:33px;">
                                        <MudTooltip @ref="ItemToolTip" ShowOnHover="true">
                                            <ChildContent>
                                                <div class="item-container">
                                                    <MudImage Src="@(auctionItem.PlayerHeadTextureId is not null ? ("https://mc-heads.net/head/" + auctionItem.PlayerHeadTextureId) : auctionItem.TextureUrl)" Style="height:33px;width:33px;" />
                                                    @if (auctionItem.Amount > 1)
                                                    {
                                                        <MudText Class="item-bottom-right-text" Style="font-family:'Minecraft'" Typo="Typo.caption">@auctionItem.Amount</MudText>
                                                    }
                                                </div>
                                            </ChildContent>
                                            <TooltipContent>
                                                <MudText Style="font-family:'Minecraft'" Typo="Typo.body1">@((MarkupString)auctionItem.DisplayName.HtmlText)</MudText>
                                                <MudText Style="font-family:'Minecraft'" Typo="Typo.body1">@((MarkupString)(auctionItem.Owner))</MudText>
                                                @if (auctionItem.Enchantments != null)
                                                {
                                                    foreach (IntTag enchant in auctionItem.Enchantments.Values)
                                                    {
                                                        <MudText Style="font-family:'Minecraft';" Typo="Typo.caption">@GameItem.WordsToUpper(enchant.Name.Substring(enchant.Name.IndexOf(":") + 1, enchant.Name.Length - enchant.Name.IndexOf(":") - 1))@((MarkupString)" : ") @enchant.Value <br /></MudText>
                                                    }
                                                }
                                            </TooltipContent>
                                        </MudTooltip>
                                    </MudDynamicDropItem>
                                </ActivatorContent>
                                <ChildContent>
                                    <MudMenuItem @onclick="@((e) => DoSomethingWithItem(e, auctionItem))">DoSomethingWithItem</MudMenuItem>
                                    <MudMenuItem @onclick="@((e) => SendToAuction(e, auctionItem))">Send To Auction</MudMenuItem>
                                    <MudMenuItem>Usage</MudMenuItem>
                                    <MudMenuItem>Close</MudMenuItem>
                                </ChildContent>
                            </MudMenu>
                            break;
                        case GameItem gameItem:
                            <MudMenu Tag="gameItem" @ondblclick="@( (x) => DoubleClickOnMenuEvent(x, gameItem))" @ref="MudMenu" ActivationEvent="@MouseEvent.RightClick" Style="height:33px;width:33px;">
                                <ActivatorContent>
                                    <MudDynamicDropItem T="GameItem" Class=" justify-center align-center flex-grow-1" Style="height:33px;width:33px;">
                                        <MudTooltip @ref="ItemToolTip" ShowOnHover="true">
                                            <ChildContent>
                                                <div class="item-container">
                                                    <MudImage Src="@(gameItem.PlayerHeadTextureId is not null ? ("https://mc-heads.net/head/" + gameItem.PlayerHeadTextureId) : gameItem.TextureUrl)" Style="height:33px;width:33px;" />
                                                    @if (gameItem.Amount > 1)
                                                    {
                                                        <MudText Class="item-bottom-right-text" Style="font-family:'Minecraft'" Typo="Typo.caption">@gameItem.Amount</MudText>
                                                    }
                                                </div>
                                            </ChildContent>
                                            <TooltipContent>
                                                <MudText Style="font-family:'Minecraft'" Typo="Typo.body1">@((MarkupString)gameItem.DisplayName.HtmlText)</MudText>
                                                @if (gameItem.Enchantments != null)
                                                {
                                                    foreach (IntTag enchant in gameItem.Enchantments.Values)
                                                    {
                                                        <MudText Style="font-family:'Minecraft';" Typo="Typo.caption">@GameItem.WordsToUpper(enchant.Name.Substring(enchant.Name.IndexOf(":") + 1, enchant.Name.Length - enchant.Name.IndexOf(":") - 1))@((MarkupString)" : ") @enchant.Value <br /></MudText>
                                                    }
                                                }
                                            </TooltipContent>
                                        </MudTooltip>
                                    </MudDynamicDropItem>
                                </ActivatorContent>
                                <ChildContent>
                                    <MudMenuItem @onclick="@((e) => DoSomethingWithItem(e, gameItem))">DoSomethingWithItem</MudMenuItem>
                                    <MudMenuItem @onclick="@((e) => SendToAuction(e, gameItem))">Send To Auction</MudMenuItem>
                                    <MudMenuItem @onclick="@((e) => DeleteItem(e, gameItem))">Delete</MudMenuItem>
                                    <MudMenuItem>Close</MudMenuItem>
                                </ChildContent>
                            </MudMenu>
                            break;
                    }
                }
            </ItemRenderer>
        </MudDropContainer>
    </CascadingValue>
}
else
{
    <PageTitle>HighGeek - Loading</PageTitle>
    <h1>Loading...</h1>
}


@code {
    public MudDropContainer<IRedisLivingObject> MainDropContainer { get; set; }
    public MudTooltip ItemToolTip { get; set; }

    public MudMenu MudMenu { set => MudMenus.Add(value); }

    public List<MudMenu> MudMenus { get; set; } = new List<MudMenu>();

    bool _drawerOpen = false;

    ApplicationUser user;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async void OnInitialized()
    {
        _themeManager.Theme = Highgeek.McWebApp.Common.Helpers.ThemeHelper.CustomTheme;
        _refreshService.PageRefreshRequested += RefreshAsync;

        _refreshService.InventoryViewRefreshRequested += RefreshInventory;
        //_refreshService.ApplicationUserRefreshRequested += UserInit;
        _refreshService.MainNavMenuClosehRequested += DrawerClose;
        //_redisUpdateService.InventoryChanged += c_InventoryUpdated;
        UserInit();

    }

    private async void UserInit()
    {
        try
        {
            user = await _userManager.GetUserAsync(authenticationState.Result.User);
        }
        catch (Exception ex)
        {
            ex.WriteExceptionToRedis();
            _logger.LogWarning("MainLayout UserInit() error: " + ex.Message);
        }

        if (user is not null)
        {
            //_userService.ApplicationUser = user;
            await _userService.UserServiceInitAsync(user);
            //await _invService.Init();
            RefreshAsync();
        }
        else
        {
            _userService.Loaded = true;
            RefreshAsync();
        }
    }


    private async void DoubleClickOnMenuEvent(MouseEventArgs mouseEventArgs, IRedisLivingObject item)
    {
        await MudMenus.FirstOrDefault(x => x.Tag == item).OpenMenuAsync(mouseEventArgs);
    }

    private async void DoSomethingWithItem(EventArgs eventArgs, GameItem gameItem)
    {
        _snack.Add((MarkupString)gameItem.DisplayName.HtmlText, Severity.Success);
        _logger.LogWarning("Trying to do something with item: " + gameItem.Name);

        var ench = gameItem.Enchantments;
        ench.Add(new IntTag("minecraft:mending", 24));
        gameItem.Enchantments = ench;
    }

    private async void SendToAuction(EventArgs eventArgs, GameItem gameItem)
    {
        _snack.Add("Sended to auction: " + (MarkupString)gameItem.DisplayName.HtmlText, Severity.Success);
        _logger.LogWarning("Sending item to auction: " + gameItem.Name);
        _auctionService.AddToAuction(_userService.MinecraftUser.NickName, 50, gameItem);

    }

    private async void DeleteItem(EventArgs eventArgs, GameItem gameItem)
    {
        await RedisService.DelFromRedis(gameItem.Uuid);
    }

    public async void RefreshAsync()
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async void RefreshInventory()
    {
        try
        {

            await InvokeAsync(() =>
            {
                StateHasChanged();
                MainDropContainer.Refresh();
            });
        }
        catch (Exception ex)
        {
            ex.WriteExceptionToRedis();
            _logger.LogWarning("MainLayout RefreshInventory() error: " + ex.Message);
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    void DrawerClose()
    {
        _drawerOpen = false;
        StateHasChanged();
    }


    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    public bool _themeManagerOpen = false;

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    private bool _disposed = false;

    void IDisposable.Dispose()
    {
        // Dispose of unmanaged resources.
        Dispose(true);
        // Suppress finalization.
        GC.SuppressFinalize(this);
    }
    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                // Dispose managed resources
                // For example: Close file handles, database connections, etc.

                _refreshService.InventoryViewRefreshRequested -= RefreshInventory;
                _refreshService.PageRefreshRequested -= RefreshAsync;
                //_refreshService.ApplicationUserRefreshRequested -= UserInit;
                _refreshService.MainNavMenuClosehRequested -= DrawerClose;
                //_redisUpdateService.InventoryChanged -= c_InventoryUpdated;
            }

            // Dispose unmanaged resources
            // For example: Release memory allocated through unmanaged code
            _themeManager = null;
            authenticationState = null;
            user = null;
            _disposed = true;
        }
    }

    ~MainLayout()
    {
        Dispose(false); // Release unmanaged resources if the Dispose method wasn't called explicitly
    }
}
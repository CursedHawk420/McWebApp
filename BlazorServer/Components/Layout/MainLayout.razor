@using Microsoft.AspNetCore.Identity
@inherits LayoutComponentBase
@inject UserManager<ApplicationUser> _userManager
@inject IRefreshService _refreshService
@inject UserService _userService
@inject ILogger<MainLayout> _logger

@inject IRedisUpdateService _redisUpdateService
@inject InventoryService _invService

@implements IDisposable

<MudThemeProvider Theme="_themeManager.Theme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<!--<MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))"  />
<MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme"  />-->
<CascadingValue Value="this">
    <MudDropContainer T="GameItem" Items="_invService.AllItems" CanDropClass="mud-border-info" NoDropClass="mud-border-error" CanDrop="@( (item,identifier ) => _invService.AllItems.Count(x => x.Identifier == identifier ) == 0)" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemPicked="_invService.ItemPicked" ItemDropped="_invService.ItemDroped"
                      Class="" @ref="MainDropContainer">
        <ChildContent>
        <MudLayout>
            <MudAppBar>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <a href="/" class="link-hover">
                    <MudText>HighGeek</MudText>
                </a>

                @if (_userService.HasConnectedAccount) 
                {
                    <MudSpacer />
                    <a href="/Minecraft/Account/Statistics">
                        <MudAvatar>
                            <MudImage Src="@("https://mc-heads.net/avatar/"+_userService.ApplicationUser.SkinHeadPicture)">

                            </MudImage>
                        </MudAvatar>
                    </a>
                }
            </MudAppBar>
            <MudDrawer @bind-Open="@_drawerOpen" Color="Color.Dark">
                <NavMenu />
            </MudDrawer>
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                    @if (_userService.Loaded)
                    {
                        @Body
                            <Highgeek.McWebApp.BlazorServer.Components.GameChat.ChatButton />
                            <MudDropZone T="GameItem" Identifier="@(_invService.WinvIdentifier + "2")" DraggingClass="mud-theme-success" Class="d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default mud-drop-zone-with-menu" Style="height:41px;width:41.4px;" />
                    }
                    else
                    {
                        <PageTitle>HighGeek - Loading</PageTitle>
                        <h1>Loading...</h1>
                    }
                </MudContainer>
            </MudMainContent>
        </MudLayout>
        
        </ChildContent>
        <ItemRenderer>
            <MudDynamicDropItem T="GameItem">
                <div class="d-flex justify-center align-center flex-grow-1">
                    <MudTooltip @ref="ItemToolTip" ShowOnClick="true" ShowOnHover="true">
                        <ChildContent>
                            <MudMenu ActivationEvent="@MouseEvent.RightClick">
                                <ActivatorContent>
                                    <div class="container">
                                        <MudImage Src="@context.TextureUrl" Style="height:36px;width:36px;" />
                                        @if (context.Amount > 1)
                                        {
                                            <MudText Class="bottom-right-text" Typo="Typo.caption">@context.Amount</MudText>
                                        }
                                    </div>
                                </ActivatorContent>
                                <ChildContent>
                                    <MudMenuItem>Profile</MudMenuItem>
                                    <MudMenuItem>Theme</MudMenuItem>
                                    <MudMenuItem>Usage</MudMenuItem>
                                    <MudMenuItem>Sign Out</MudMenuItem>
                                </ChildContent>
                            </MudMenu>
                        </ChildContent>
                        <TooltipContent>
                            <MudText Typo="Typo.body1">@((MarkupString)context.DisplayName.HtmlText)</MudText>
                            @if (context.Enchantments != null)
                            {
                                foreach (IntTag enchant in context.Enchantments.Values)
                                {
                                    <MudText Typo="Typo.caption">@GameItem.WordsToUpper(enchant.Name.Substring(enchant.Name.IndexOf(":") + 1, enchant.Name.Length - enchant.Name.IndexOf(":") - 1)) @((MarkupString)": ") @enchant.Value <br /></MudText>
                                }
                            }
                        </TooltipContent>
                    </MudTooltip>
                </div>
            </MudDynamicDropItem>
        </ItemRenderer>
    </MudDropContainer>
</CascadingValue>
<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    public MudDropContainer<GameItem> MainDropContainer { get; set; }
    public MudTooltip ItemToolTip { get; set; }

    bool _drawerOpen = false;

    ApplicationUser user;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async void OnInitialized()
    {
        _themeManager.Theme = Highgeek.McWebApp.Common.Helpers.ThemeHelper.CustomTheme;
        _refreshService.PageRefreshRequested += Refresh;
        _refreshService.ApplicationUserRefreshRequested += UserInit;
        _refreshService.MainNavMenuClosehRequested += DrawerClose;
        _redisUpdateService.InventoryChanged += c_InventoryUpdated;
        UserInit();

    }

    private async void UserInit()
    {
        try
        {
            user = await _userManager.GetUserAsync(authenticationState.Result.User);
        }
        catch (Exception ex)
        {
            _logger.LogWarning("MainLayout UserInit() error: " + ex.Message);
        }

        if (user is not null)
        {
            _userService.ApplicationUser = user;
            await _userService.UserServiceInitAsync();
            await _invService.Init();
            Refresh();
        }
        else
        {
            _userService.Loaded = true;
            Refresh();
        }
    }

    private void Refresh()
    {
        try
        {
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _logger.LogWarning("MainLayout Refresh() error: " + ex.Message);
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    void DrawerClose()
    {
        _drawerOpen = false;
        StateHasChanged();
    }


    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    public bool _themeManagerOpen = false;

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }


    public async void c_InventoryUpdated(object sender, InventoryPositionInfo info)
    {
        try
        {
            if (_invService.InvData.ListPosition.ContainsKey(info.uuid))
            {
                _logger.LogInformation("Updated inventory: " + info.uuid);
                await InvokeAsync(async () =>
                {
                    // Set the local variable
                    await _invService.listUpdater(info);
                    //_logger.LogInformation("Updated inventory: " + Uuid + " Type: " + Type);
                    // Tell Blazor to rewrite the DOM
                    try
                    {
                        StateHasChanged();
                        MainDropContainer.Refresh();
                    }
                    catch (Exception ex)
                    {
                        _logger.LogWarning("c_InventoryUpdated() failed!: \nMessage: \n" + ex.Message + "\nTrace: \n" + ex.StackTrace);
                    }
                });
            }
        }
        catch(Exception ex)
        {
            _logger.LogWarning("c_InventoryUpdated() failed!: \nMessage: \n"+ ex.Message + "\nTrace: \n" + ex.StackTrace);
        }
    }

    private bool _disposed = false;

    void IDisposable.Dispose()
    {
        // Dispose of unmanaged resources.
        Dispose(true);
        // Suppress finalization.
        GC.SuppressFinalize(this);
    }
    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                // Dispose managed resources
                // For example: Close file handles, database connections, etc.

                _refreshService.PageRefreshRequested -= Refresh;
                _refreshService.ApplicationUserRefreshRequested -= UserInit;
                _refreshService.MainNavMenuClosehRequested -= DrawerClose;
            }

            // Dispose unmanaged resources
            // For example: Release memory allocated through unmanaged code

            _themeManager = null;
            authenticationState = null;
            user = null;
            _disposed = true;
        }
    }

    ~MainLayout()
    {
        Dispose(false); // Release unmanaged resources if the Dispose method wasn't called explicitly
    }
}
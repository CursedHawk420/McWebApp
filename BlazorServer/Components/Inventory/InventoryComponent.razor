@inject ILogger<InventoryComponent> _logger
@inject IRedisUpdateService _redisUpdateService
@inject IRedisItemsService _invService
@inject IBrowserViewportService _browserViewportService
@inject IRefreshService _refreshService
@implements IDisposable
@if (loadingComplete)
{
    <div style="position:fixed; bottom:0; margin-left:2rem;right:2rem;margin-bottom:6rem;">
        <div class="@invclass">
            <div style="background-image:url('@vinvsize'); width: 380px; background-size:100%;background-repeat:no-repeat ; border-top: 40px solid transparent; background-position:-15px -36px; border-left: 10px solid transparent; border-bottom: 20px solid transparent;">
                @if (true)
                {
                    @for (int r = 0; r < vinvrows; r++)
                    {
                        <div class="d-flex dropinv ">
                            @for (int c = 0; c < 9; c++)
                            {
                                <MudDropZone CanDrop="@((item) => item is INonMoveable ? false : true)" T="IRedisLivingObject" Identifier="@($"{vinvrawuuid}{i.ToString()}")" DraggingClass="mud-theme-success" Class="mud-drop-zone-with-menu d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default" Style="height:37.8px;width:38.1px;" />
                                i++;
                            }
                        </div>
                    }
                    this.i = 0;
                }
            </div>
        </div>
    </div>
}else{
    <h1>Loading...</h1>
}

@code {
    [CascadingParameter]
    public Highgeek.McWebApp.BlazorServer.Components.Layout.MainLayout MainLayout { get; set; }

    string vinvsize;
    string vinvrawuuid;
    private int vinvrows;
    private int vinvslots;
    private int i = 0;
    private string invclass = "biginv";
    public VirtualInventory Inventory;
    private bool loadingComplete = false;


    protected override async void OnInitialized()
    {

        _refreshService.InventoryViewRefreshRequested += Load;
        _redisUpdateService.InventoryChanged += c_InventoryUpdated;
        if (_invService.VirtualInventories.Count > 0){

            Inventory = _invService.VirtualInventories[0];
            Load();
        }

    }
    public async void Reload(VirtualInventory virtualInventory){
        Inventory = virtualInventory;
        Load();
    }

    public async void Load()
    {
        if(Inventory.Web){
            vinvrawuuid = "winv:" + Inventory.PlayerName + ":" + Inventory.InventoryUuid + ":";
        }else{
            vinvrawuuid = "vinv:" + Inventory.PlayerName + ":" + Inventory.InventoryUuid + ":";
        }

        await InvokeAsync(async () =>
        {
            vinvslots = Inventory.Size;
            await DetermineInventorySize();
            loadingComplete = true;
            StateHasChanged();
        });
    }

    public async Task DetermineInventorySize()
    {
        if (vinvslots > 27)
        {
            vinvsize = "https://images.highgeek.eu/doublechest.png";
            vinvrows = 6;
        }
        else
        {
            vinvsize = "https://images.highgeek.eu/singlechest.png";
            vinvrows = 3;
        }
    }


    public async void c_InventoryUpdated(object? sender, InventoryPositionInfo info)
    {
        try
        {
            if (Inventory.InventoryUuid == info.uuid)
            {
                _logger.LogInformation("Updated inventory: " + info.uuid);
                await InvokeAsync(async () =>
                {
                    try
                    {
                        StateHasChanged();
                        MainLayout.MainDropContainer.Refresh();
                    }
                    catch (Exception ex)
                    {
                        ex.WriteExceptionToRedis();
                        _logger.LogWarning("c_InventoryUpdated() failed!: \nMessage: \n" + ex.Message + "\nTrace: \n" + ex.StackTrace);
                    }
                });
            }
        }
        catch (Exception ex)
        {
            ex.WriteExceptionToRedis();
            _logger.LogWarning("c_InventoryUpdated() failed!: \nMessage: \n" + ex.Message + "\nTrace: \n" + ex.StackTrace);
        }
    }
    
    Func<VirtualInventory, string> converter = p => p?.InventoryUuid;

    private bool _disposed = false;

    void IDisposable.Dispose()
    {
        // Dispose of unmanaged resources.
        Dispose(true);
        // Suppress finalization.
        GC.SuppressFinalize(this);
    }
    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                // Dispose managed resources
                // For example: Close file handles, database connections, etc.

                _refreshService.InventoryViewRefreshRequested -= Load;
                _redisUpdateService.InventoryChanged -= c_InventoryUpdated;
                //_browserViewportService.UnsubscribeAsync(_subscriptionId);
            }

            // Dispose unmanaged resources
            // For example: Release memory allocated through unmanaged code

            Inventory = null;
            _disposed = true;
        }
    }

    ~InventoryComponent()
    {
        Dispose(false); // Release unmanaged resources if the Dispose method wasn't called explicitly
    }
}

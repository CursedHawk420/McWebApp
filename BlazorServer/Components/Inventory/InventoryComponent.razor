@inject ILogger<InventoryComponent> _logger
@inject IRedisUpdateService _redisUpdateService
@inject InventoryManagerService _invManager
@inject IBrowserViewportService _browserViewportService
@implements IDisposable

<style>
    .smallinv {
        transform: scale(0.85, 0.85);
        -ms-transform: scale(0.85, 0.85); /* IE 9 */
        -webkit-transform: scale(0.85, 0.85); /* Safari and Chrome */
        -o-transform: scale(0.85, 0.85); /* Opera */
        -moz-transform: scale(0.85, 0.85); /* Firefox */
        margin-left: -8%;
        margin-bottom: -2%;
        justify-content: center;
    }

    .biginv {
        transform: scale(1.2, 1.2);
        -ms-transform: scale(1.2, 1.2); /* IE 9 */
        -webkit-transform: scale(1.2, 1.2); /* Safari and Chrome */
        -o-transform: scale(1.2, 1.2); /* Opera */
        -moz-transform: scale(1.2, 1.2); /* Firefox */
        margin-left: 9%;
        margin-bottom: 3%;
        margin-top: 5%;
        float: left;
    }
</style>
@if (loadingComplete)
{
    <MudDropContainer T="GameItem" Items="invData.Items" CanDropClass="mud-border-info" NoDropClass="mud-border-error" CanDrop="@( (item,identifier ) => invData.Items.Count(x => x.Identifier == identifier ) == 0)" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemPicked="ItemPicked" ItemDropped="ItemDroped"
                      Class="" @ref="dropContainer">

        <ChildContent>
            <div class="row">
                <div class="col-md-6">
                    <div class="@invclass">
                        <MudText Style="margin-top:0.1%; margin-bottom:0.1%">@(syncredisdatum == null ? "Nothing selected." : $"Ingame Inventory: {syncredisdatum.InventoryName}")</MudText>

                        <div style="background-image:url('@vinvsize'); width: 410px; background-size:100%;background-repeat:no-repeat ; border-top: 40px solid transparent; background-position:-15px -39px; border-left: 10px solid transparent; border-bottom: 20px solid transparent;">
                            @if (true)
                            {
                                @for (int r = 0; r < vinvrows; r++)
                                {
                                    <div class="d-flex dropinv ">
                                        @for (int c = 0; c < 9; c++)
                                        {
                                            <MudDropZone T="GameItem" Identifier="@($"{vinvrawuuid}{i.ToString()}")" DraggingClass="mud-theme-success" Class="d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default " Style="height:41px;width:41.4px;" />
                                            i++;
                                        }
                                    </div>
                                }
                                this.i = 0;
                            }
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="@invclass">
                        <MudText Style="margin-top:0.1%;margin-bottom:0.1%;">@(winvsyncredisdatum == null ? "Nothing selected." : $"Web Inventory: {winvsyncredisdatum.InventoryName}")</MudText>

                        <div style="background-image:url('@winvsize'); width: 410px; background-size:100%;background-repeat:no-repeat ; border-top: 40px solid transparent; background-position:-15px -39px; border-left: 10px solid transparent; border-bottom: 20px solid transparent;">
                            @if (true)
                            {

                                @for (int r = 0; r < winvrows; r++)
                                {
                                    <div class="d-flex dropinv">
                                        @for (int c = 0; c < 9; c++)
                                        {
                                            <MudDropZone T="GameItem" Identifier="@($"{winvrawuuid}{ii.ToString()}")" DraggingClass="mud-theme-success" Class="d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default " Style="height:41px;width:41.4px;" />
                                            ii++;
                                        }
                                    </div>
                                }
                                this.ii = 0;
                            }
                        </div>
                    </div>
                </div>
            </div>
        </ChildContent>
        <ItemRenderer>
            <MudDynamicDropItem T="GameItem">
                <div class="d-flex justify-center align-center flex-grow-1">
                    <MudTooltip @ref="tooltip">
                        <ChildContent>
                            <div class="container">
                                <MudImage Src="@context.TextureName" Style="height:36px;width:36px;" />
                                @if (context.Amount > 1)
                                {
                                    <MudText Class="bottom-right-text" Typo="Typo.caption">@context.Amount</MudText>
                                }
                            </div>
                        </ChildContent>
                        <TooltipContent>
                            <MudText Typo="Typo.body2">@context.name</MudText>
                            @if (context.Enchantments != null)
                            {
                                foreach (var enchant in context.Enchantments)
                                {
                                    <MudText Typo="Typo.caption">@enchant.Key @((MarkupString)": ") @enchant.Value <br /></MudText>
                                }
                            }
                        </TooltipContent>
                    </MudTooltip>
                </div>
            </MudDynamicDropItem>
        </ItemRenderer>
    </MudDropContainer>
}

@code {
    //zmena
    [Parameter]
    public VirtualInventory syncredisdatum { get; set; }

    [Parameter]
    public VirtualInventory winvsyncredisdatum { get; set; }

    private InventoryData invData = new InventoryData();

    //todo: load winv data
    private InventoryData webinvData = new InventoryData();
    private InventoryData vinvData = new InventoryData();
    //todo: velikost invů
    private int winvslots;
    private int vinvslots;

    private int winvrows;
    private int vinvrows;

    private int i = 0;
    private int ii = 0;

    private string winvrawuuid;
    private string vinvrawuuid;

    private string winvsize;
    private string vinvsize;

    MudDropContainer<GameItem> dropContainer;

    MudTooltip tooltip;

    private bool loadingComplete = false;


    //todo: implement scale method to change to smallinv
    private string invclass = "biginv";

    protected override async void OnInitialized()
    {
        _redisUpdateService.InventoryChanged += c_InventoryUpdated;

        _invManager.mcuuid = syncredisdatum.PlayerUuid;
        _invManager.mcusername = syncredisdatum.PlayerName;

        vinvData.Syncredisdatum = syncredisdatum;
        webinvData.Syncredisdatum = winvsyncredisdatum;

        winvrawuuid = "winv:" + winvsyncredisdatum.PlayerName + ":" + winvsyncredisdatum.InventoryUuid + ":";
        vinvrawuuid = "vinv:" + syncredisdatum.PlayerName + ":" + syncredisdatum.InventoryUuid + ":";

        await InvokeAsync(async () =>
        {
            invData.Items = new List<GameItem?>();
            vinvData.Items = await _invManager.LoadItemsFromRedis(syncredisdatum.InventoryUuid, "vinv");
            webinvData.Items = await _invManager.LoadItemsFromRedis(winvsyncredisdatum.InventoryUuid, "winv");
            vinvslots = vinvData.Items.Count;
            winvslots = webinvData.Items.Count;
            await DetermineInventorySize();
            invData.Items.AddRange(vinvData.Items);
            invData.Items.AddRange(webinvData.Items);
            loadingComplete = true;
            StateHasChanged();
        });
    }


    //TODO adaptér pro velikosti invů

    public async Task ItemPicked(MudDragAndDropItemTransaction<GameItem> pickItem)
    {
        tooltip.IsVisible = false;
        //_logger.LogInformation("ItemParser.GetItemPositionInt(pickItem.SourceZoneIdentifier) = " + await ItemParser.GetItemPositionInt(pickItem.SourceZoneIdentifier));

    }
    public async Task ItemDroped(MudItemDropInfo<GameItem> dropItem)
    {
        string olduuid = dropItem.Item.Identifier;


        //dropItem.Item.Identifier = dropItem.DropzoneIdentifier;

        string item = await RedisService.GetFromRedis(olduuid);
        await RedisService.SetInRedis(olduuid, ItemParser.AIRITEM);
        await RedisService.SetInRedis(dropItem.DropzoneIdentifier, item);
    }

    public async Task DetermineInventorySize()
    {
        if (vinvslots > 27)
        {
            vinvsize = "https://images.highgeek.eu/doublechest.png";
            vinvrows = 6;
        }
        else
        {
            vinvsize = "https://images.highgeek.eu/singlechest.png";
            vinvrows = 3;
        }

        if (winvslots > 27)
        {
            winvsize = "https://images.highgeek.eu/doublechest.png";
            winvrows = 6;
        }
        else
        {
            winvsize = "https://images.highgeek.eu/singlechest.png";
            winvrows = 3;
        }
    }

    public async Task RefreshInventory()
    {
        await InvokeAsync(async () =>
        {
            vinvData.Syncredisdatum = syncredisdatum;
            webinvData.Syncredisdatum = winvsyncredisdatum;

            vinvslots = syncredisdatum.Size.Value;
            winvslots = winvsyncredisdatum.Size.Value;

            await DetermineInventorySize();

            winvrawuuid = "winv:" + winvsyncredisdatum.PlayerName + ":" + winvsyncredisdatum.InventoryUuid + ":";
            vinvrawuuid = "vinv:" + syncredisdatum.PlayerName + ":" + syncredisdatum.InventoryUuid + ":";

            invData.Items = new List<GameItem?>();

            vinvData.Items = await _invManager.LoadItemsFromRedis(syncredisdatum.InventoryUuid, "vinv");
            webinvData.Items = await _invManager.LoadItemsFromRedis(winvsyncredisdatum.InventoryUuid, "winv");


            invData.Items.AddRange(vinvData.Items);
            invData.Items.AddRange(webinvData.Items);

            //webinvData.Items = await _invManager.LoadItemsFromRedis(syncredisdatum.InventoryUuid, "winv");
            StateHasChanged();
            dropContainer.Refresh();
        });
    }

    public async void c_InventoryUpdated(object sender, InventoryPositionInfo info)
    {
        if (vinvData.Syncredisdatum.InventoryUuid == info.uuid || webinvData.Syncredisdatum.InventoryUuid == info.uuid)
        {
            _logger.LogInformation("Updated inventory: " + info.uuid);
            await InvokeAsync(async () =>
            {
                // Set the local variable
                await listUpdater(info);
                //_logger.LogInformation("Updated inventory: " + Uuid + " Type: " + Type);
                // Tell Blazor to rewrite the DOM
                StateHasChanged();
                dropContainer.Refresh();
            });
        }
    }
    public async Task listUpdater(InventoryPositionInfo info)
    {
        _logger.LogInformation("Updating item: " + info.uuid + ":" + info.position);

        if (info.rawuuid.Contains("winv:"))
        {
            invData.Items[int.Parse(info.position) + vinvslots].Json = info.Item;
            invData.Items[int.Parse(info.position) + vinvslots] = await ItemParser.CreateItem(info.Item, int.Parse(info.position), info.rawuuid);
        }
        else
        {
            invData.Items[int.Parse(info.position)].Json = info.Item;
            invData.Items[int.Parse(info.position)] = await ItemParser.CreateItem(info.Item, int.Parse(info.position), info.rawuuid);
        }


    }
    private int _width = 0;
    private int _height = 0;

    private Guid _subscriptionId = Guid.NewGuid();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _browserViewportService.SubscribeAsync(_subscriptionId, Lambda, fireImmediately: true);
        }
        i = 0;
        ii = 0;
        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task Lambda(BrowserViewportEventArgs args)
    {
        if (args.BrowserWindowSize.Width <= 575)
        {
            invclass = "smallinv";
        }
        else
        {
            invclass = "biginv";
        }
        await InvokeAsync(StateHasChanged);
    }


    void IDisposable.Dispose()
    {
        //BrowserViewportService.UnsubscribeAsync(_subscriptionId);
        _browserViewportService.UnsubscribeAsync(_subscriptionId);
        _redisUpdateService.InventoryChanged -= c_InventoryUpdated;
        //_usermanager.Dispose();
    }
}

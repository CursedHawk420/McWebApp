@inject IInventoryService _invService
@inject ILogger<InventoryTabs> _logger
@inject IUserService _userService
@inject IRefreshService _refreshService

@implements IDisposable
@if (loadingComplete)
{
    @if (_invService.InvData != null)
    {
        <div class="row">
        <div class="col-md-6">
        @if (vinvData.Count > 1)
        {

                    <MudSelect T="VirtualInventory" @bind-Value="@selectedVinv" ToStringFunc="@converter" Label="Select your inventory" Variant="Variant.Outlined" Class="" SelectedValuesChanged=SelectedChanged>
                @foreach (var inv in vinvData)
                {
                    <MudSelectItem Value="@inv" />
                }
                    </MudSelect>
                }
            </div>
            <div class="col-md-6">
        @if (winvData.Count > 1)
        {

                    <MudSelect T="VirtualInventory" @bind-Value="@selectedWinv" ToStringFunc="@converter" Label="Select your web inventory" Variant="Variant.Outlined" Class="" SelectedValuesChanged=SelectedChanged>
                @foreach (var inv in winvData)
                {
                    <MudSelectItem Value="@inv" />
                }
                    </MudSelect>
                }
            </div>
        </div>

        @if (selectedVinv != null)
        {
            <InventoryComponent selectedVinv="selectedVinv"  @ref="inventoryComponent" />
        }

    }

}
else
{
    <h1>Loading...</h1>
}

@code {
    //https://mudblazor.com/components/select#custom-converter

    //TODO kdyz je jen jeden tak nevytvaret select boxy vubec
    //TODO novej selectbox i pro winv

    private bool loadingComplete = false;
    protected InventoryComponent inventoryComponent;


    private List<VirtualInventory> winvData = new List<VirtualInventory>();
    private List<VirtualInventory> vinvData = new List<VirtualInventory>();

    private VirtualInventory selectedVinv;
    private VirtualInventory selectedWinv;

    protected override async void OnInitialized()
    {
        //_refreshService.InventoryViewRefreshRequested += Load;
        if (vinvData.Count == 0)
        {
            Load();
        }
    }

    public async void Load()
    {
        await InvokeAsync(async () =>
        {

            foreach (var datum in _invService.InvData.Inventories)
            {
                if (datum.Web == true)
                {
                    winvData.Add(datum);
                }
                else
                {
                    vinvData.Add(datum);
                }
            }
            selectedVinv = vinvData[0];
            selectedWinv = winvData[0];

            loadingComplete = true;
            StateHasChanged();
        });
    }

    public async Task SelectedChanged(IEnumerable<VirtualInventory> newselection)
    {
        //await inventoryComponent.RefreshInventory();
    }

    Func<VirtualInventory, string> converter = p => p?.InventoryName;


    private bool _disposed = false;

    void IDisposable.Dispose()
    {
        // Dispose of unmanaged resources.
        Dispose(true);
        // Suppress finalization.
        GC.SuppressFinalize(this);
    }
    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                // Dispose managed resources
                // For example: Close file handles, database connections, etc.

                _refreshService.InventoryViewRefreshRequested -= Load;
                //BrowserViewportService.UnsubscribeAsync(_subscriptionId);
                //_userManager.Dispose();
                //_invService.Dispose();
            }

            // Dispose unmanaged resources
            // For example: Release memory allocated through unmanaged code
            
            selectedVinv = null;
            selectedWinv = null;
            _disposed = true;
        }
    }

    ~InventoryTabs()
    {
        Dispose(false); // Release unmanaged resources if the Dispose method wasn't called explicitly
    }
}

@inject ISnackbar _snack
@inject IUserService _userService
@inject IRefreshService _refreshService
@inject ILocalizer l

@implements IAsyncDisposable


<MudFab Color="Color.Primary" StartIcon="@Icons.Material.TwoTone.Chat" OnClick="ChatButtonClicked" Style="position: fixed; bottom:0; right:0; margin-bottom: 2.0rem; margin-right:2.0rem " />
@if (_userService.LpUser is not null)
{
    @if (IsChatOpen)
    {
        <IngameChatComponent @ref=ingameChatComponent/>
    }
}

@code {
    public bool IsChatOpen = false;

    IngameChatComponent ingameChatComponent;

    protected override async void OnInitialized()
    {
        _refreshService.PageRefreshRequested += Refresh;
        _refreshService.ChatWindowCloseRequested += CloseChatWindow;
        l.LocaleRefreshRequested += RefreshAsync;
    }

    private async void RefreshAsync()
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async void Refresh(){

        if (_userService.ApplicationUser is null){
            IsChatOpen = false;
        }
        if (_userService.LpUser is null){
            IsChatOpen = false;
        }
        StateHasChanged();
    }

    private async void CloseChatWindow()
    {
        IsChatOpen = false;
        StateHasChanged();
    }

    public async void ChatButtonClicked()
    {
        if (_userService.ApplicationUser is null){
            _snack.Add(l["chatbutton-warning-01"], Severity.Warning);
            return;
        }
        if (_userService.LpUser is null){
            _snack.Add(l["chatbutton-warning-02"], Severity.Warning);
            return;
        }
        if (IsChatOpen)
        {
            IsChatOpen = false;
            await InvokeAsync(async () =>
            {
                StateHasChanged();
            });
        }
        else
        {
            IsChatOpen = true;
            await InvokeAsync(async () =>
            {
                StateHasChanged();
            });
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync(){
        _refreshService.PageRefreshRequested -= Refresh;
        l.LocaleRefreshRequested -= RefreshAsync;
    }
}

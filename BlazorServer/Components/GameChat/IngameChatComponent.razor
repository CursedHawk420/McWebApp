@inject IRedisUpdateService _iRedisUpdateService
@inject GameChatService _gameChatService
@inject UserService _userService
@inject ISnackbar _snack
@inject IJSRuntime js
@inject ILogger<IngameChatComponent> _logger
@inject IRefreshService _refreshService
@implements IDisposable
@if (loadingComplete)
{
    <MudPaper Class="" Style="max-width:50rem;position:fixed; margin-left:2rem;right:2rem; bottom:2rem; background-color:#212121; min-width:25rem">
        <MudPaper Class="flex flex-col shrink-0 w-full bg-primary-gradient text-primary-content shadow-md z-1 cursor-pointer" Style="height: 50px; background-color:#1B5E20">
            <div class="row">
                <div class="col-5">
                    <MudText Style="padding:0.5rem;" Typo="Typo.h5">Game chat</MudText>
                </div>
                <div class="col-6" >
                    <MudSelect T="ChannelSettingsAdapter" MultiSelection="true" SelectAll="true" @ref="channelSelector" SelectedValues="_userService.JoinedChannels" SelectedValuesChanged="JoinedChannelsChanged" ToStringFunc="converter" Style="margin-top:-0.5rem; margin-right:1rem; margin-left:-1.5rem">
                        @foreach(var channel in _userService.AvaiableChannels)
                        {
                            <MudSelectItem T="ChannelSettingsAdapter" Value="channel" >@channel.FancyName</MudSelectItem>
                        }
                    </MudSelect>
                </div>

                <div class="col-1">
                    <MudIcon Style="position: absolute; right: 0.5rem; top:0.3rem" Icon="@Icons.Material.Filled.KeyboardArrowDown" Size="Size.Large" @onclick="CloseChatWindow" />
                </div>
            </div>
        </MudPaper>
        <MudPaper @ref="_chatField" Style="height:30rem;  background-color:#212121; overflow-y:scroll;" class="scrollchatarea">
            <MudList Clickable="false" Dense="true" DisableGutters="false">
                @foreach (var entry in _gameChatService.chat)
                {
                    <MudListItem Text="@DeserializeMessage(entry)" />

                }
            </MudList>
        </MudPaper>
        <MudPaper Class="flex flex-col shrink-0 w-full bg-primary-gradient text-primary-content shadow-md z-1 cursor-pointer" Style="height: 50px; background-color:#1B5E20">
            <div class="row">
                <div class="col-9" >
                    <MudTextField @ref="RefEntryField" @bind-Value="@textInput" Variant="Variant.Text" OnKeyDown="TextFieldOnKeyDown" Disabled="disableChatInput" Immediate="true" Style="margin-left:1rem; margin-top:0.1rem" />
                </div>
                <div class="col-3">
            <MudSelect T="ChannelSettingsAdapter" @ref="channelSelector" @bind-Value="_userService.ChannelOut" SelectedValuesChanged="OutChannelChanged" ToStringFunc="converter" Style="margin-top:-0.5rem; margin-right:1rem; margin-left:-1.5rem">
                @foreach (var channel in _userService.AvaiableChannels)
                {
                    <MudSelectItem T="ChannelSettingsAdapter" Value="channel">@channel.FancyName</MudSelectItem>
                }
                    </MudSelect>
                </div>
            </div>
        </MudPaper>
    </MudPaper>
}
@code {

    private bool loadingComplete = false;
    private bool disableChatInput = false;

    //TODO: channel out select

    private MudTextField<string> RefEntryField;

    private MudSelect<ChannelSettingsAdapter> channelSelector = new MudSelect<ChannelSettingsAdapter>();

    private string textInput = "";

    private MudPaper _chatField;

    private async void JoinedChannelsChanged(IEnumerable<ChannelSettingsAdapter> channelSettingsAdapters)
    {
        _userService.JoinedChannels = channelSettingsAdapters.ToList();
        _userService.PlayerServerSettings.joinedChannels.Clear();
        foreach (var channel in channelSettingsAdapters)
        {
            _userService.PlayerServerSettings.joinedChannels.Add(channel.Name);
            _logger.LogInformation("Channel joined: " + channel.FancyName);
        }
        await _userService.UpdatePlayerSettings();
    }

    private async void OutChannelChanged(IEnumerable<ChannelSettingsAdapter> channelSettingsAdapters)
    {
        var channel = channelSettingsAdapters.First();
        _userService.ChannelOut = channel;
        _userService.PlayerServerSettings.channelOut = channel.Name;
        _logger.LogInformation("ChannelOut joined: " + channel.FancyName);
        await _userService.UpdatePlayerSettings();
    }

    protected override async void OnInitialized()
    {
        _refreshService.ChatRefreshRequested += RefreshChat;

        await InvokeAsync(async () =>
        {
            loadingComplete = true;
            StateHasChanged();
        });
        await ScrollChatWindowToBottom();
    }

    async void TextFieldOnKeyDown(KeyboardEventArgs args)
    {
        if (args.Key is "Enter" or "NumppadEnter")
        {
            RefEntryField.TextUpdateSuppression = false;

            await _gameChatService.SendMessage(await _gameChatService.CreateMessage(textInput));

            textInput = string.Empty;
            await InvokeAsync(StateHasChanged);
            await Task.Run(async () =>
            {
                await Task.Delay(150);
                RefEntryField.TextUpdateSuppression = true;
            });
        }
    }

    public async void RefreshChat()
    {
        await InvokeAsync(async () =>
        {
            StateHasChanged();
        });
        await ScrollChatWindowToBottom();
    }

    public static string DeserializeMessage(RedisChatEntryAdapter message)
    {
        return message.Datetime.Value + " " + message.Nickname + ": " + message.Message;
    }


    private async Task ScrollChatWindowToBottom()
    {
        await Task.Delay(10);
        try
        {
            await js.InvokeVoidAsync("scrollToBottom", "scrollchatarea");
        }
        catch(Exception ex)
        {
            _logger.LogWarning("ScrollChatWindowToBottom() threw exception: " + ex.Message);
        }
    }

    Func<ChannelSettingsAdapter, string> converter = p => p?.FancyName;

    private async Task CloseChatWindow()
    {
        _refreshService.CallChatWindowClose();
    }

    void IDisposable.Dispose()
    {
        _refreshService.ChatRefreshRequested -= RefreshChat;
        _gameChatService.DisposeAsync();
    }
}

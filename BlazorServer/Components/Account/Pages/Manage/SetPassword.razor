@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Highgeek.McWebApp.Common.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager _navManager
@inject ISnackbar _snack
@inject ILocalizer l
@implements IDisposable

<PageTitle>@l["SetPassword"]</PageTitle>

<h3>@l["SetYourPassword"]</h3>
<StatusMessage Message="" />
<p class="text-info">
    @l["SetPasswordText"]
</p>
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" placeholder="Please enter your new password." />
                <label for="new-password" class="form-label">@l["NewPassword"]</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Please confirm your new password." />
                <label for="confirm-password" class="form-label">@l["ConfirmPassword"]</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">@l["SetPassword"]</button>
        </EditForm>
     </div>
</div>

@code {
    private ApplicationUser user = default!;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        l.LocaleRefreshRequested += RefreshAsync;
        user = await UserAccessor.GetUserAsync(authenticationState.Result);

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            _navManager.NavigateTo("Account/Manage/ChangePassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            _snack.Add($"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}", Severity.Warning);
            return;
        }

        //await SignInManager.RefreshSignInAsync(user);
        _snack.Add(l["SetPasswordSucces"], Severity.Success);
        _navManager.NavigateTo("Account/Manage/ChangePassword");
    }

    private async void RefreshAsync()
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    void IDisposable.Dispose()
    {
        l.LocaleRefreshRequested -= RefreshAsync;
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}

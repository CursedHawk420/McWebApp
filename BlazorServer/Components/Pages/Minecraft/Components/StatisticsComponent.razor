@using Newtonsoft.Json
@using System.Collections.Concurrent

@inherits LanguageBase

@inject IRedisUpdateService _redisUpdateService

@attribute [PermissionsAuthorize("connectedaccount")]

<PageTitle>@l["acc-stats"]</PageTitle>

    <h1>@l["acc-stats"]</h1>
    @if (loaded)
    {
        <MudCarousel Style="height:70vh; width:100%;overflow-y:auto;" ShowArrows="@true" ShowBullets="@true" EnableSwipeGesture="true" AutoCycle="false" TData="object">
            @foreach (var item in Values.ToArray().OrderBy(p => p.Key))
            {
                <MudCarouselItem Transition="Transition.Slide" Color="@Color.Transparent">
                    <div class="row" style="padding-bottom:2rem;left:3rem">
                        <h3>@l[item.Key]</h3>
                        <div class="row">
                            @foreach (var it in item.Value)
                            {
                                @if (it.Key == "GENERAL" || it.Key == "KILL_ENTITY" || it.Key == "ENTITY_KILLED_BY")
                                {
                                    <StatsCarouselGeneralComponent Stats="it" />
                                }
                            }
                            <StatsCarouselPlanComponent PlayerName="@PlayerName" ServerName="@item.Key"/>
                        </div>
                        <div class="row">
                            @foreach (var it in item.Value)
                            {
                                @if (it.Key != "GENERAL" && it.Key != "KILL_ENTITY" && it.Key != "ENTITY_KILLED_BY")
                                {
                                    <StatsCarouselItemComponent Stats="it" />
                                }
                            }
                        </div>
                    </div>
                </MudCarouselItem>
            }
        </MudCarousel>
    }

@code {
    string MergedJson;
    bool locked = false;
    Dictionary<string, string> ServersStats = new Dictionary<string, string>();

    ConcurrentDictionary<string, ConcurrentDictionary<string, Dictionary<string, int>>> Values = new ConcurrentDictionary<string, ConcurrentDictionary<string, Dictionary<string, int>>>();

    private bool loaded = false;

    [Parameter]
    public string PlayerName { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _redisUpdateService.StatsUpdate += UpdateStats;
        if (!locked)
        {
            SetStats();
        }
    }

    public async void SetStats()
    {
        locked = true;
        try
        {
            var keys = await RedisService.GetKeysList("players:stats:" + PlayerName + ":*");
            ServersStats.Clear();
            foreach (var key in keys)
            {
                var item = RedisService.GetJson(key);
                var name = key.Substring(key.LastIndexOf(':') + 1, key.Length - key.LastIndexOf(':') - 1);
                ServersStats.TryAdd(name, item);
            }



            //dictionary merge
            var toProccess = new List<ConcurrentDictionary<string, Dictionary<string, int>>>();
            var proccessed = new ConcurrentDictionary<string, Dictionary<string, int>>();
            Values = new ConcurrentDictionary<string, ConcurrentDictionary<string, Dictionary<string, int>>>();
            foreach (var item in ServersStats)
            {
                if (item.Key != "auth")
                {
                    var dict = JsonConvert.DeserializeObject<ConcurrentDictionary<string, Dictionary<string, int>>>(item.Value);
                    Values.TryAdd(item.Key, dict);
                    toProccess.Add(dict);
                }
            }


            foreach (var item in toProccess)
            {
                foreach (var items in item)
                {
                    var currkey = items.Key;
                    proccessed.TryAdd(currkey, new Dictionary<string, int>());
                    var currDict = proccessed[currkey];
                    foreach (var it in items.Value)
                    {
                        var good = currDict.TryAdd(it.Key, it.Value);
                        if (!good)
                        {

                            proccessed[currkey][it.Key] = currDict[it.Key] + it.Value;
                        }
                    }
                }
            }

            Values.TryAdd("allserversstats", proccessed);

            MergedJson = JsonConvert.SerializeObject(proccessed);

            loaded = true;
            RefreshAsync();
        }
        catch(Exception ex)
        {
            RefreshAsync();
        }
        locked = false;
    }

    public async void UpdateStats(object? sender, string uuid)
    {
        if (uuid.Contains(PlayerName))
        {
            if (!locked)
            {
                SetStats();
            }
        }
    }

    public override void Dispose(bool disposing)
    {
        if (disposing)
        {
            _redisUpdateService.StatsUpdate -= UpdateStats;
        }
    }

    public class StatType
    {
        public string Name { get; set; }
        public string Type { get; set; }

        public StatType(string name, string type)
        {
            this.Type = type;
            this.Name = name;
        }
    }
}
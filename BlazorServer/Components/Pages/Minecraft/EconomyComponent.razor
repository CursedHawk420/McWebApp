@inherits LanguageBase

@inject IUserService _userService
@inject IRefreshService _refreshService


    @if(!Economy.IsNullOrEmpty())
    {
        <MudPaper Style="margin-right:1rem; padding:0.4rem">
            <span>
                @foreach (var item in Economy)
                {
                    <MudText Typo="Typo.subtitle2">@((MarkupString)(l[item.Key] + " : " + item.Value.ToString()))</MudText>
                }
            </span>
        </MudPaper>
    }

@code {
    Dictionary<string, float> Economy { get; set; }



    protected override void OnInitialized()
    {
        base.OnInitialized();
        if(!_userService.Economy.IsNullOrEmpty()){
            Economy = _userService.Economy;
        }
        _refreshService.EcoRefreshRequested += RefreshAsync;
        _refreshService.PageRefreshRequested += RefreshAsync;
    }

    public override async void RefreshAsync()
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() =>
        {
            if(!_userService.Economy.IsNullOrEmpty()){
                Economy = _userService.Economy;
            }
            StateHasChanged();
        });
    }


    public override void Dispose(bool disposing)
    {
        if (disposing)
        {
            _refreshService.EcoRefreshRequested -= StateHasChanged;
            _refreshService.PageRefreshRequested -= RefreshAsync;
        }
    }

}

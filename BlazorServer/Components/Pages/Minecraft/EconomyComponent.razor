@inject IUserService _userService
@inject IRefreshService _refreshService
@inject ILocalizer l
@implements IDisposable

    @if(Economy.Count != 0)
    {
        <MudPaper Style="margin-right:1rem; padding:0.4rem">
            <span>
                @foreach (var item in Economy)
                {
                    <MudText Typo="Typo.subtitle2">@((MarkupString)(l[item.Key] + " : " + item.Value.ToString()))</MudText>
                }
            </span>
        </MudPaper>
    }

@code {
    Dictionary<string, float> Economy { get; set; }



    protected override async Task OnInitializedAsync()
    {
        @if (_userService.Loaded && _userService.HasConnectedAccount)
        {
            Economy = _userService.Economy;
            _refreshService.EcoRefreshRequested += RefreshAsync;
            _refreshService.PageRefreshRequested += RefreshAsync;
            l.LocaleRefreshRequested += RefreshAsync;
        }
    }

    public async void RefreshAsync()
    {
        @if (_userService.Loaded && _userService.HasConnectedAccount)
        {
            // InvokeAsync is inherited, it syncs the call back to the render thread
            await InvokeAsync(() =>
            {
                Economy = _userService.Economy;
                StateHasChanged();
            });
        }
    }


    public void Dispose()
    {
        _refreshService.EcoRefreshRequested -= StateHasChanged;
        _refreshService.PageRefreshRequested -= RefreshAsync;
        l.LocaleRefreshRequested -= RefreshAsync;
    }

}

@page "/Minecraft/Account/Statistics"

@using Newtonsoft.Json

@inherits LanguageBase

@inject IUserService _userService
@inject IRedisUpdateService _redisUpdateService

@attribute [PermissionsAuthorize("connectedaccount")]

<PageTitle>@l["acc-stats"]</PageTitle>
<div style="margin-top:0.5rem; font-family:Minecraft; font-size:9pt" class="col-md-9">
    <h1>@l["acc-stats"]</h1>
    @if (loaded)
    {
        <MudCarousel Style="height:70vh; width:100%;overflow-y:auto;" ShowArrows="@true" ShowBullets="@true" EnableSwipeGesture="true" AutoCycle="false" TData="object">
            @foreach (var item in Values.Reverse())
            {
                <MudCarouselItem Transition="Transition.Slide" Color="@Color.Transparent">
                    <div class="row" style="padding-bottom:2rem">
                        <h3>@l[item.Key]</h3>
                        <div class="row">
                            @foreach (var it in item.Value)
                            {
                                @if (it.Key == "GENERAL" || it.Key == "KILL_ENTITY" || it.Key == "ENTITY_KILLED_BY")
                                {
                                    <StatsGeneralComponent Stats="it" />
                                }
                            }
                        </div>
                        <div class="row">
                            @foreach (var it in item.Value)
                            {
                                @if (it.Key != "GENERAL" && it.Key != "KILL_ENTITY" && it.Key != "ENTITY_KILLED_BY")
                                {
                                    <StatsItemComponent Stats="it" />
                                }
                            }
                        </div>
                    </div>
                </MudCarouselItem>
            }
        </MudCarousel>
    }
</div>

@code {
    string MergedJson;
    Dictionary<string, string> ServersStats = new Dictionary<string, string>();

    Dictionary<string, Dictionary<string, Dictionary<string, int>>> Values = new Dictionary<string, Dictionary<string, Dictionary<string, int>>>();

    private bool loaded = false;

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        _redisUpdateService.StatsUpdate += UpdateStats;
        SetStats();
    }

    public async void SetStats()
    {
        var keys = await RedisService.GetKeysList("players:stats:" + _userService.MinecraftUser.NickName + ":*");
        ServersStats.Clear();
        foreach (var key in keys)
        {
            var item = RedisService.GetJson(key);
            var name = key.Substring(key.LastIndexOf(':') + 1, key.Length - key.LastIndexOf(':') - 1);
            ServersStats.TryAdd(name, item);
        }



        //dictionary merge
        var toProccess = new List<Dictionary<string, Dictionary<string, int>>>();
        var proccessed = new Dictionary<string, Dictionary<string, int>>();
        Values = new Dictionary<string, Dictionary<string, Dictionary<string, int>>>();
        foreach (var item in ServersStats)
        {
            if (item.Key != "auth")
            {
                var dict = JsonConvert.DeserializeObject<Dictionary<string, Dictionary<string, int>>>(item.Value);
                Values.TryAdd(item.Key, dict);
                toProccess.Add(dict);
            }
        }


        foreach (var item in toProccess)
        {
            foreach (var items in item)
            {
                var currkey = items.Key;
                proccessed.TryAdd(currkey, new Dictionary<string, int>());
                var currDict = proccessed[currkey];
                foreach (var it in items.Value)
                {
                    var good = currDict.TryAdd(it.Key, it.Value);
                    if (!good)
                    {

                        proccessed[currkey][it.Key] = currDict[it.Key] + it.Value;
                    }
                }
            }
        }

        Values.TryAdd("allserversstats", proccessed);

        MergedJson = JsonConvert.SerializeObject(proccessed);

        loaded = true;
        RefreshAsync();
    }

    public async void UpdateStats(object? sender, string uuid)
    {
        if (uuid.Contains(_userService.MinecraftUser.NickName))
        {
            SetStats();
        }
    }

    public override void Dispose(bool disposing)
    {
        if (disposing)
        {
            _redisUpdateService.StatsUpdate -= UpdateStats;
        }
    }

    public class StatType
    {
        public string Name { get; set; }
        public string Type { get; set; }

        public StatType(string name, string type)
        {
            this.Type = type;
            this.Name = name;
        }
    }
}
@page "/Minecraft/Account/Register"

@layout MinecraftManageLayout

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@inject MinecraftUserManager _mcUserManager
@inject IUserService _userService
@inject ISnackbar _snack
@inject NavigationManager _navManager
@inject IRefreshService _refreshService
@inject ILocalizer l

@implements IDisposable

@attribute [PermissionsAuthorize("disconnectedaccount")]

<PageTitle>@l["ConnectMcAccount"]</PageTitle>

<h3>@l["ConnectMcAccount"]</h3>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="connect-minecraft" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="text" @bind-Value="Input.Nickname" class="form-control" placeholder="@l["IngameNickname"]" />
                <label for="username" class="form-label">@l["IngameNickname"]</label>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="password" aria-required="true" placeholder="@l["IngamePassword"]" />
                <label for="password" class="form-label">@l["IngamePassword"]</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">@l["ConnectAccount"]</button>
        </EditForm>
    </div>
</div>


@code {
    //TODO Dispose
    protected override void OnInitialized()
    {
        l.LocaleRefreshRequested += RefreshAsync;
    }

    private async Task OnValidSubmitAsync(){
        string result = await _mcUserManager.RegisterMcUser(Input.Nickname, Input.Password, _userService.ApplicationUser);
        if (result == "Účet připojen úspěšně!")
        {
            _snack.Add(result, Severity.Success);
            _navManager.NavigateTo("Minecraft/Account/Statistics");
            _refreshService.CallServiceRefresh();
        }
        else
        {
            _snack.Add(result, Severity.Error);
        }
    }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();


    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Nickname")]
        public string? Nickname { get; set; } = "";

        [Required]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";
    }

    private async void RefreshAsync()
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        l.LocaleRefreshRequested -= RefreshAsync;
    }
}
@page "/Minecraft/Account/Skin"

@using OpenApi.Highgeek.MineSkinApi.Model;

@inject IUserService _userService
@inject MinecraftUserManager _mcUserManager
@inject SkinManager _skinManager
@inject MineskinApiCommunication _mineSkinApi
@inject ISnackbar _snack
@inject IRefreshService _refreshService
@inject ILocalizer l

@implements IAsyncDisposable

@attribute [PermissionsAuthorize("connectedaccount")]

<PageTitle>@l["SkinChanger"]</PageTitle>
<h1>@l["SkinChanger"]</h1>

<div class="row">
    <div class="col-md-6">
        <div class="form-floating mb-3">
            <InputText type="text" Value="@Url" class="form-control" placeholder="@l["SkinUrl"]" ValueChanged="TryRenderSkin" ValueExpression="() => Url" />
            <label for="url" class="form-label">@l["Url"]</label>
        </div>
        <button style="margin-bottom:0.5rem" @onclick="SaveSkin" class="w-100 btn btn-lg btn-primary">@l["SaveSkin"]</button>
        <button @onclick="ClearSkin" class="w-100 btn btn-lg btn-danger">@l["ClearSkin"]</button>
    </div>
    <div class="col-md-6">
        <div>
            <MudImage Src="@ImageUrl" Style=" margin:auto; display: block;"></MudImage>
        </div>
    </div>
</div>

@code{

    private GenerateUrlPost200Response mineskinResponse;

    public string Url;

    private StatusModel Result;

    private bool ImageSet = false;

    private string ImageUrl;

    protected override void OnInitialized()
    {
        ImageUrl = "https://visage.surgeplay.com/full/384/" + _userService.ApplicationUser.SkinHeadPicture;
        l.LocaleRefreshRequested += RefreshAsync;
    }

    private async Task SaveSkin()
    {

        if (!string.IsNullOrEmpty(Url))
        {
            /*Uri uriResult;
            bool result = Uri.TryCreate(Url, UriKind.Absolute, out uriResult)
                && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
                if (result)
                {
                mineskinResponse = _mineSkinApi.UrlSkin(Url);
                Result = await _skinManager.UpdateSkinAsync(mineskinResponse, _userService.ApplicationUser, Url);
                await _skinManager.SetHeadPicture(mineskinResponse, _userService.ApplicationUser);
                _refreshService.CallServiceRefresh();
                _snack.Add(Result, Severity.Success);
            }*/
            if (mineskinResponse is not null)
            {
                await _skinManager.UpdateSkinAsync(mineskinResponse, _userService.ApplicationUser, Url);
                Result = await _skinManager.SetHeadPicture(mineskinResponse, _userService.ApplicationUser);
                _userService.ApplicationUser.SkinHeadPicture = mineskinResponse.Data.Texture.Url.Remove(0, 38);
                _refreshService.CallPageRefresh();
                _snack.Add(l[Result.UserMessage], Severity.Success);
            }
        }
    }

    private async Task TryRenderSkin(string value)
    {
        Url = value;
        await Task.Delay(100);
        Uri uriResult;
        bool result = Uri.TryCreate(Url, UriKind.Absolute, out uriResult)
            && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
        if (result)
        {
            //mineskinResponse = null;
            mineskinResponse = _mineSkinApi.UrlSkin(Url);
            if(mineskinResponse is not null)
            {
                ImageUrl = "https://visage.surgeplay.com/full/384/" + mineskinResponse.Data.Texture.Url.Remove(0, 38);
                ImageSet = true;
                StateHasChanged();
            }
            else
            {
                _snack.Add(l["skinchanger-error-01"], Severity.Error);
            }
        }
        else
        {
            _snack.Add(l["skinchanger-error-02"], Severity.Error);
        }
    }

    private async Task ClearSkin()
    {
        await _skinManager.DefaultSkin(null, _userService.ApplicationUser, null);
        _snack.Add(l["skinchanger-clear"], Severity.Success);
    }

    private async Task TryUpdateSkinOnServer()
    {
        //TODO check if player is online, than update
    }


    private async void RefreshAsync()
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    public async ValueTask DisposeAsync()
    {
        l.LocaleRefreshRequested -= RefreshAsync;
        ImageUrl = null;
        ImageSet = false;
        Result = null;
        Url = null;
        mineskinResponse = null;

        await _skinManager.DisposeAsync();
    }
}
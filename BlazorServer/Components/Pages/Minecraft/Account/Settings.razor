@page "/Minecraft/Account/Settings"

@inherits LanguageBase

@inject MinecraftUserManager _mcUserManager
@inject IUserService _userService
@inject ISnackbar _snack
@inject IRefreshService _refreshService
@inject NavigationManager _navManager
@inject IConnectedUsersService _connectedUsersService

@attribute [PermissionsAuthorize("connectedaccount")]


<PageTitle>@l["GameAccountSettings"]</PageTitle>

<div style="margin-top:0.5rem" class="col-md-6">
<h1>@l["GameAccountSettings"]</h1>

<div style="padding-top:1rem;padding-bottom:1rem;">
    <MudSwitch Label="@l[ _checked+"-set-premium-account"]" LabelPosition="LabelPosition.End" T="bool" ValueChanged="ValueChange" Value="_checked" ThumbIcon="@Icons.Material.Filled.WorkspacePremium" ThumbIconColor="@(_checked==true ? Color.Success : Color.Error)"></MudSwitch>
</div>

<button @onclick="DisconnectAccount" class="w-100 btn btn-lg btn-danger">@l["DisconnectMcAccount"]</button>

</div>
@code{
    private bool _checked;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _checked = _userService.MinecraftUser.IsPremium;
    }

    private async void ValueChange()
    {
        _checked = !_checked;
        _userService.MinecraftUser.IsPremium = !_userService.MinecraftUser.IsPremium;

        if (_checked)
        {
            var result = await _userService.SetPremiumAccount();
            if (result.Success)
            {
                _snack.Add(l[result.UserMessage], Severity.Success);
            }
            else
            {
                _snack.Add(l[result.UserMessage], Severity.Error);
            }
        }
        else
        {
            var result = await _userService.UnsetPremiumAccount();
            if (result.Success)
            {
                _snack.Add(l[result.UserMessage], Severity.Success);
            }
        }
    }

    private async Task DisconnectAccount()
    {
        StatusModel result = await _mcUserManager.DisconnectMinecraftAccount(_userService.ApplicationUser);
        await _userService.DisconnectGameAccount();
        _snack.Add(l[result.UserMessage], Severity.Success);
        _refreshService.CallServiceRefresh();
        if (result.Success)
        {
            _connectedUsersService.CallAdminViewRefresh();
            _navManager.NavigateTo("/");
        }
        else
        {
            
        }
    }
}
@page "/Minecraft/Account/Settings"

@inject MinecraftUserManager _mcUserManager
@inject IUserService _userService
@inject ISnackbar _snack
@inject IRefreshService _refreshService
@inject NavigationManager _navManager
@inject ILocalizer l
@inject IConnectedUsersService _connectedUsersService

@attribute [PermissionsAuthorize("connectedaccount")]

@implements IDisposable

<PageTitle>@l["GameAccountSettings"]</PageTitle>

<h1>@l["GameAccountSettings"]</h1>

<button @onclick="DisconnectAccount" class="w-100 btn btn-lg btn-danger">@l["DisconnectMcAccount"]</button>

@code{
    protected override void OnInitialized()
    {
        l.LocaleRefreshRequested += RefreshAsync;
    }
    //TODO Dispose

    private async Task DisconnectAccount(){
        StatusModel result = await _mcUserManager.DisconnectMinecraftAccount(_userService.ApplicationUser);
        await _userService.DisconnectGameAccount();
        _snack.Add(l[result.UserMessage], Severity.Success);
        _refreshService.CallServiceRefresh();
        if (result.Success)
        {
            _connectedUsersService.CallAdminViewRefresh();
            _navManager.NavigateTo("/");
        }
        else
        {
            
        }
    }

    private async void RefreshAsync()
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    void IDisposable.Dispose()
    {
        l.LocaleRefreshRequested -= RefreshAsync;
    }

}
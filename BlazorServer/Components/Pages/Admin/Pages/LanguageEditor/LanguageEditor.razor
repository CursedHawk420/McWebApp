@page "/Admin/Manage/Language"

@inherits LanguageBase

@using McWebApp.Common.Models.Language

<PageTitle>@(l["nav-admin"] + " / " + l["nav-admin-LanguageEditor"])</PageTitle>
<h3>@l["nav-admin-LanguageEditor"]</h3>

@if (loaded)
{
    <MudTable Items="@NewKey" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh>Key</MudTh>
            <MudTh>En</MudTh>
            <MudTh>Cs</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
            </MudTd>
            <MudTd DataLabel="Key">
                <MudTextField Lines="@((int)context.En.LinesCount() >= 2 ? (int)context.En.LinesCount() : 2 )" @bind-Value="context.Key"></MudTextField>
            </MudTd>
            <MudTd DataLabel="En">
                <MudTextField Lines="@((int)context.En.LinesCount() >= 2 ? (int)context.En.LinesCount() : 2 )" @bind-Value="context.En"></MudTextField>
            </MudTd>
            <MudTd DataLabel="Cs">
                <MudTextField Lines="@((int)context.En.LinesCount() >= 2 ? (int)context.En.LinesCount() : 2 )" @bind-Value="context!.Cs"></MudTextField>
            </MudTd>
            <MudTd>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="@(() => AddItem(context))">Add</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <MudTable Items="@LanguageModel.LanguageKeys.AsEnumerable().Reverse()" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Key</MudTh>
            <MudTh>En</MudTh>
            <MudTh>Cs</MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Key">@context.Key</MudTd>
            <MudTd DataLabel="En">
                <MudTextField Lines="@((int)context.En.LinesCount() >= 2 ? (int)context.En.LinesCount() : 2 )" @bind-Value="context.En"></MudTextField>
            </MudTd>
            <MudTd DataLabel="Cs">
                <MudTextField Lines="@((int)context.En.LinesCount() >= 2 ? (int)context.En.LinesCount() : 2 )" @bind-Value="context.Cs"></MudTextField>
            </MudTd>
            <MudTd>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Warning" Color="Color.Warning" OnClick="@(() => UpdateItems(context))">Update</MudButton>
            </MudTd>
            <MudTd>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteItem(context))">Delete</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

}



@code {
    LanguageModel LanguageModel;

    IList<LanguageKey> NewKey = new List<LanguageKey>();

    bool loaded;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        LanguageModel = LanguageModel.FromJson(RedisService.GetFromRedis("settings:mcwebapp:language"));

        NewKey.Add(GetNewKey());

        /*foreach(var item in LanguageModel.LanguageKeys)
            {
            item.Cs
        }*/

        loaded = true;
        RefreshAsync();
    }

    public async Task UpdateLanguageInRedis()
    {
        if (LanguageModel.LanguageKeys.Last().Key.IsNullOrEmpty())
        {
            LanguageModel.LanguageKeys.Remove(LanguageModel.LanguageKeys.Last());
        }
        await RedisService.SetInRedis("settings:mcwebapp:language", LanguageModel.ToJson());
    }
    
    public async void DeleteItem(LanguageKey key)
    {
        LanguageModel.LanguageKeys.Remove(key);
        await UpdateLanguageInRedis();
    }
    public async void AddItem(LanguageKey key)
    {
        LanguageModel.LanguageKeys.Add(NewKey.First());
        NewKey.Clear();
        NewKey.Add(GetNewKey());


        await UpdateLanguageInRedis();

        await InvokeAsync(StateHasChanged);
    }

    public async void UpdateItems(LanguageKey key)
    {
        await UpdateLanguageInRedis();
        RefreshAsync();
    }






    public async void RefreshAsync()
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private LanguageKey GetNewKey()
    {
        var last = new LanguageKey();
        last.En = "";
        last.Cs = "";
        last.Key = "";
        return last;
    }

}

@inject ILocalizer l
@inject UserManager<ApplicationUser> _userManager
@inject MinecraftUserManager _mcUserManager
@inject ISnackbar _snack
@inject IConnectedUsersService _connectedUsersService


<MudImage Src="@("https://api.highgeek.eu/api/skins/playerhead/" + ApplicationUser.mcNickname)"></MudImage>
<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DisconnectMcAccount">Disconnect mc account</MudButton>
@code {
    [Parameter]
    public ApplicationUser ApplicationUser { get; set; }


    private async Task DisconnectMcAccount()
    {
        var list = _connectedUsersService.FindSessionsByUser(ApplicationUser);

        var status = await _mcUserManager.DisconnectMinecraftAccount(ApplicationUser);
        if (!status.Success)
        {
            _snack.Add(l[status.UserMessage], Severity.Error);
        }
        else
        {
            _snack.Add(l[status.UserMessage], Severity.Success);
        }

        if (list.Count != 0)
        {
            foreach (var userservice in list)
            {
                await userservice.DisconnectGameAccount();
                userservice._refreshService.CallServiceRefresh();
            }
        }
        _connectedUsersService.CallAdminViewRefresh();
        RefreshAsync();
    }


    protected override void OnInitialized()
    {
        l.LocaleRefreshRequested += RefreshAsync;
        _connectedUsersService.AdminViewRefreshRequested += RefreshAsync;
    }

    private async void RefreshAsync()
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    public void Dispose()
    {
        l.LocaleRefreshRequested -= RefreshAsync;
        _connectedUsersService.AdminViewRefreshRequested -= RefreshAsync;
    }
}

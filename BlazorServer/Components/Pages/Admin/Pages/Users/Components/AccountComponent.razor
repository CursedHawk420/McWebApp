@inject ILocalizer l
@inject UserManager<ApplicationUser> _userManager
@inject MinecraftUserManager _mcUserManager
@inject ISnackbar _snack
@inject IConnectedUsersService _connectedUsersService

<div class="row">
    <div class="col">
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteUserAsync">Delete user</MudButton>
    </div>
</div>
@code {
    [Parameter]
    public ApplicationUser ApplicationUser { get; set; }


    private async Task DeleteUserAsync()
    {
        if (ApplicationUser.mcNickname is not null)
        {
            var status = await _mcUserManager.DisconnectMinecraftAccount(ApplicationUser);

            if (!status.Success)
            {
                _snack.Add(l[status.UserMessage], Severity.Error);
                return;
            }
            else
            {
                _snack.Add(l[status.UserMessage], Severity.Success);
            }
        }
        var result = await _userManager.DeleteAsync(ApplicationUser);
        if (!result.Succeeded)
        {
            _snack.Add(l["admin-users-userdelete-error-01"], Severity.Error);
        }
        _snack.Add(l["admin-users-userdelete-success-01"], Severity.Success);
    }


    protected override void OnInitialized()
    {
        l.LocaleRefreshRequested += RefreshAsync;
        _connectedUsersService.AdminViewRefreshRequested += RefreshAsync;
    }

    private async void RefreshAsync()
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    public void Dispose()
    {
        l.LocaleRefreshRequested -= RefreshAsync;
        _connectedUsersService.AdminViewRefreshRequested -= RefreshAsync;
    }
}

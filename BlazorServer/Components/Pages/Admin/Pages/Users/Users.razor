@page "/Admin/Manage/Users"
@using Highgeek.McWebApp.BlazorServer.Components.Pages.Admin.Pages.Users.Components
@inject IUserService _userService
@inject IRefreshService _refreshService
@inject UserManager<ApplicationUser> _userManager
@inject MinecraftUserManager _mcUserManager
@inject IConnectedUsersService _connectedUsersService

@inherits LanguageBase

<PageTitle>@(l["nav-admin"] + " / " + l["nav-admin-users"])</PageTitle>

<h3>@l["nav-admin-users"]</h3>
@if (_userService.Loaded)
{
    @if (LoadingComplete)
    {
        <MudTable Items="@applicationUsers" Hover="true" Breakpoint="Breakpoint.Sm">
            <ColGroup>
                <col style="width:300px;" />
                <col style="width:100px;" />
                <col style="width:100px;" />
                <col style="width:100px;" />
            </ColGroup>
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Username</MudTh>
                <MudTh>Gamename</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.ApplicationUser.Id</MudTd>
                <MudTd DataLabel="Username">@context.ApplicationUser.UserName</MudTd>
                <MudTd DataLabel="Gamename">@(context.ApplicationUser.mcNickname is not null ? context.ApplicationUser.mcNickname : l["offline"])</MudTd>
                <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.ApplicationUser.Id))">@((context.ShowDetails == true) ? l["HideDetails"] : l["ShowDetails"])</MudButton></MudTd>
            </RowTemplate>
            <ChildRowContent>
                @if (context.ShowDetails)
                {
                    <MudTr>
                        <td colspan="4">
                            <MudCard Elevation="1">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1">@l["AdminUsersAccountDetails"] <strong>@context.ApplicationUser.UserName</strong></MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="pa-0">
                                    <div class="container" style="padding-bottom:2rem">
                                        <MudPaper Style="background-color:#313131; padding:1rem">
                                            <h4>Web</h4>
                                            <AccountComponent ApplicationUser="context.ApplicationUser"></AccountComponent>
                                        </MudPaper>
                                        @if (context.ApplicationUser.mcUUID is not null)
                                        {
                                            <MudPaper Style="background-color:#313131; padding:1rem; margin-top:1rem;">
                                                    <h4 style="padding-top:0.5rem">Minecraft</h4>
                                                    <MinecraftComponent ApplicationUser="context.ApplicationUser"></MinecraftComponent>
                                            </MudPaper>
                                        }
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </td>
                    </MudTr>
                }
            </ChildRowContent>
        </MudTable>
    }
}

@code {
    public IList<AppUser> applicationUsers = new List<AppUser>();

    public bool LoadingComplete = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _refreshService.PageRefreshRequested += RefreshAsync;
        _connectedUsersService.AdminViewRefreshRequested += UsersInitDelay;

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_userService.Loaded)
        {
            if (firstRender)
            {
                UsersInit();
            }
        }
    }

    public async void UsersInitDelay()
    {
        Thread.Sleep(2000);
        UsersInit();
    }

    public async void UsersInit()
    {
        applicationUsers = new List<AppUser>();

        foreach (var user in _userManager.Users)
        {
            applicationUsers.Add(new AppUser(user));
        }

        LoadingComplete = true;
        RefreshAsync();
    }

    private void ShowBtnPress(string nr)
    {
        AppUser tmpPerson = applicationUsers.First(f => f.ApplicationUser.Id == nr);
        tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
    }


    private async void RefreshAsync()
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    public override void Dispose(bool disposing)
    {
        if (disposing)
        {
            _refreshService.PageRefreshRequested -= RefreshAsync;
            _connectedUsersService.AdminViewRefreshRequested -= UsersInitDelay;
        }
    }


    public class AppUser
    {
        public ApplicationUser ApplicationUser { get; set; }
        public bool ShowDetails = false;

        public AppUser(ApplicationUser applicationUser)
        {
            this.ApplicationUser = applicationUser;
        }
    }
}
